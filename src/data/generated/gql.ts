/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query getArticlePageQuery($slug: String!) {\n    articles(filters: { slug: { eqi: $slug } }) {\n      data {\n        attributes {\n          breadcrumbs_title\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            time_to_read\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          components {\n            __typename\n            ... on ComponentArticleSectionHeaderWithTexts {\n              id\n              header\n              Descr\n            }\n            ... on ComponentArticleSteps {\n              id\n              steps {\n                id\n                title\n                description\n              }\n            }\n            ... on ComponentSharedTitleDescrImage {\n              id\n              title\n              description\n              image {\n                data {\n                  attributes {\n                    height\n                    url\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetArticlePageQueryDocument,
    "\n  query getAllArticlesQuery(\n    $filters: ArticleFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    articles(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    articleTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n": types.GetAllArticlesQueryDocument,
    "\n  query getGuidePageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          breadcrumbs_title\n          components {\n            ... on ComponentArticleSectionHeaderWithTexts {\n              Descr\n              header\n            }\n            ... on ComponentArticleSteps {\n              steps {\n                description\n                title\n              }\n            }\n            ... on ComponentGuideTable {\n              data(sort: $sort) {\n                column_1\n                column_2\n                order\n              }\n              column_2_name\n              column_1_name\n            }\n            ... on ComponentSharedTitleDescrImage {\n              description\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          slug\n          header {\n            header\n          }\n          createdAt\n        }\n      }\n    }\n    projects(pagination: $pagination) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          task\n          object_address\n          job_type\n          slug\n        }\n      }\n    }\n  }\n": types.GetGuidePageQueryDocument,
    "\n  query getGuidesPageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    guideTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n": types.GetGuidesPageQueryDocument,
    "\n  query getAllProjectsQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    projects(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    projectTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n": types.GetAllProjectsQueryDocument,
    "\n  query getProjectPageQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n  ) {\n    projects(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n          breadcrumbs_title\n          header {\n            header\n          }\n          end_date\n          images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          results\n          start_date\n          tabs {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n            description\n          }\n          createdAt\n          project_tags {\n            data {\n              attributes {\n                tag\n                projects(pagination: $pagination) {\n                  data {\n                    attributes {\n                      big_image {\n                        big_image {\n                          data {\n                            attributes {\n                              url\n                            }\n                          }\n                        }\n                      }\n                      slug\n                      task\n                      job_type\n                      object_address\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetProjectPageQueryDocument,
    "\n  query getServicePageQuery(\n    $filters: ServiceFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    services(filters: $filters) {\n      data {\n        attributes {\n          breadcrumbs_title\n          header {\n            header\n          }\n          page_description {\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n          }\n          slug\n          subservices {\n            data {\n              attributes {\n                header {\n                  header\n                }\n                slug\n                page_description\n                big_image {\n                  big_image {\n                    data {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    projects(sort: $sort, pagination: $pagination) {\n      data {\n        attributes {\n          slug\n          task\n          job_type\n          object_address\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetServicePageQueryDocument,
    "\n  query getSubservicePageQuery($filters: SubserviceFiltersInput) {\n    subservices(filters: $filters) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          page_description\n          service {\n            data {\n              attributes {\n                slug\n                header {\n                  header\n                }\n              }\n            }\n          }\n          tabs_info {\n            title\n            description\n            image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSubservicePageQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getArticlePageQuery($slug: String!) {\n    articles(filters: { slug: { eqi: $slug } }) {\n      data {\n        attributes {\n          breadcrumbs_title\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            time_to_read\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          components {\n            __typename\n            ... on ComponentArticleSectionHeaderWithTexts {\n              id\n              header\n              Descr\n            }\n            ... on ComponentArticleSteps {\n              id\n              steps {\n                id\n                title\n                description\n              }\n            }\n            ... on ComponentSharedTitleDescrImage {\n              id\n              title\n              description\n              image {\n                data {\n                  attributes {\n                    height\n                    url\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getArticlePageQuery($slug: String!) {\n    articles(filters: { slug: { eqi: $slug } }) {\n      data {\n        attributes {\n          breadcrumbs_title\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            time_to_read\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          components {\n            __typename\n            ... on ComponentArticleSectionHeaderWithTexts {\n              id\n              header\n              Descr\n            }\n            ... on ComponentArticleSteps {\n              id\n              steps {\n                id\n                title\n                description\n              }\n            }\n            ... on ComponentSharedTitleDescrImage {\n              id\n              title\n              description\n              image {\n                data {\n                  attributes {\n                    height\n                    url\n                    width\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllArticlesQuery(\n    $filters: ArticleFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    articles(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    articleTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllArticlesQuery(\n    $filters: ArticleFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    articles(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    articleTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGuidePageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          breadcrumbs_title\n          components {\n            ... on ComponentArticleSectionHeaderWithTexts {\n              Descr\n              header\n            }\n            ... on ComponentArticleSteps {\n              steps {\n                description\n                title\n              }\n            }\n            ... on ComponentGuideTable {\n              data(sort: $sort) {\n                column_1\n                column_2\n                order\n              }\n              column_2_name\n              column_1_name\n            }\n            ... on ComponentSharedTitleDescrImage {\n              description\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          slug\n          header {\n            header\n          }\n          createdAt\n        }\n      }\n    }\n    projects(pagination: $pagination) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          task\n          object_address\n          job_type\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGuidePageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          breadcrumbs_title\n          components {\n            ... on ComponentArticleSectionHeaderWithTexts {\n              Descr\n              header\n            }\n            ... on ComponentArticleSteps {\n              steps {\n                description\n                title\n              }\n            }\n            ... on ComponentGuideTable {\n              data(sort: $sort) {\n                column_1\n                column_2\n                order\n              }\n              column_2_name\n              column_1_name\n            }\n            ... on ComponentSharedTitleDescrImage {\n              description\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          slug\n          header {\n            header\n          }\n          createdAt\n        }\n      }\n    }\n    projects(pagination: $pagination) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          task\n          object_address\n          job_type\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getGuidesPageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    guideTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getGuidesPageQuery(\n    $filters: GuideFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    guides(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    guideTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllProjectsQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    projects(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    projectTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllProjectsQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n    $sort: [String]\n  ) {\n    projects(filters: $filters, pagination: $pagination, sort: $sort) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n        }\n      }\n      meta {\n        pagination {\n          total\n        }\n      }\n    }\n    projectTags {\n      data {\n        attributes {\n          tag\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProjectPageQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n  ) {\n    projects(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n          breadcrumbs_title\n          header {\n            header\n          }\n          end_date\n          images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          results\n          start_date\n          tabs {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n            description\n          }\n          createdAt\n          project_tags {\n            data {\n              attributes {\n                tag\n                projects(pagination: $pagination) {\n                  data {\n                    attributes {\n                      big_image {\n                        big_image {\n                          data {\n                            attributes {\n                              url\n                            }\n                          }\n                        }\n                      }\n                      slug\n                      task\n                      job_type\n                      object_address\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProjectPageQuery(\n    $filters: ProjectFiltersInput\n    $pagination: PaginationArg\n  ) {\n    projects(filters: $filters) {\n      data {\n        attributes {\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            time_to_read\n          }\n          job_type\n          task\n          object_address\n          slug\n          breadcrumbs_title\n          header {\n            header\n          }\n          end_date\n          images {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          results\n          start_date\n          tabs {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n            description\n          }\n          createdAt\n          project_tags {\n            data {\n              attributes {\n                tag\n                projects(pagination: $pagination) {\n                  data {\n                    attributes {\n                      big_image {\n                        big_image {\n                          data {\n                            attributes {\n                              url\n                            }\n                          }\n                        }\n                      }\n                      slug\n                      task\n                      job_type\n                      object_address\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getServicePageQuery(\n    $filters: ServiceFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    services(filters: $filters) {\n      data {\n        attributes {\n          breadcrumbs_title\n          header {\n            header\n          }\n          page_description {\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n          }\n          slug\n          subservices {\n            data {\n              attributes {\n                header {\n                  header\n                }\n                slug\n                page_description\n                big_image {\n                  big_image {\n                    data {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    projects(sort: $sort, pagination: $pagination) {\n      data {\n        attributes {\n          slug\n          task\n          job_type\n          object_address\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getServicePageQuery(\n    $filters: ServiceFiltersInput\n    $sort: [String]\n    $pagination: PaginationArg\n  ) {\n    services(filters: $filters) {\n      data {\n        attributes {\n          breadcrumbs_title\n          header {\n            header\n          }\n          page_description {\n            description\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            title\n          }\n          slug\n          subservices {\n            data {\n              attributes {\n                header {\n                  header\n                }\n                slug\n                page_description\n                big_image {\n                  big_image {\n                    data {\n                      attributes {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    projects(sort: $sort, pagination: $pagination) {\n      data {\n        attributes {\n          slug\n          task\n          job_type\n          object_address\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getSubservicePageQuery($filters: SubserviceFiltersInput) {\n    subservices(filters: $filters) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          page_description\n          service {\n            data {\n              attributes {\n                slug\n                header {\n                  header\n                }\n              }\n            }\n          }\n          tabs_info {\n            title\n            description\n            image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getSubservicePageQuery($filters: SubserviceFiltersInput) {\n    subservices(filters: $filters) {\n      data {\n        attributes {\n          slug\n          createdAt\n          header {\n            header\n          }\n          page_description\n          service {\n            data {\n              attributes {\n                slug\n                header {\n                  header\n                }\n              }\n            }\n          }\n          tabs_info {\n            title\n            description\n            image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n          big_image {\n            big_image {\n              data {\n                attributes {\n                  url\n                  width\n                  height\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;